from datetime import datetime
import random
import string
from typing import Dict


class ReadmeFormatter:
    """Formats README content with consistent structure and metadata."""

    def __init__(self, model_name: str):
        """
        Initialize the formatter with the model name.

        Args:
            model_name (str): Name of the model used for generation
        """
        self.model_name = model_name

    def _generate_slug(self) -> str:
        """Generate a 6-character alphanumeric slug."""
        chars = string.ascii_letters + string.digits
        return "".join(random.choice(chars) for _ in range(6))

    def _format_date(self) -> str:
        """Get current date in yyyy-MM-dd HH:mm:ss format."""
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    def format_readme(
        self,
        repo_summary: str,
        repo_name: str,
        tree_output: str,
        folder_summaries: Dict[str, str],
    ) -> str:
        """
        Format the README with the repository summary, structure, and detailed summaries.

        Args:
            repo_summary (str): High-level repository summary
            repo_name (str): Name of the repository
            tree_output (str): Directory structure of the repository
            folder_summaries (dict): Summaries of each folder

        Returns:
            str: Formatted README content
        """
        slug = self._generate_slug()

        folder_sections = "\n\n".join(
            [f"### {folder}\n{summary}" for folder, summary in folder_summaries.items()]
        )

        sections = [
            f"# {repo_name}",
            "## Overview",
            repo_summary,
            "",
            "## Project Structure",
            "Below is the repository structure along with a brief summary of each folder and its contents:",
            "```",
            tree_output,
            "```",
            folder_sections,
            "",
            "---",
            f"*Generated by {self.model_name} ({slug}) on {self._format_date()}*",
        ]

        return "\n\n".join(sections)
